import cocotb
from cocotb.clock import Clock
from cocotb.triggers import ClockCycles

@cocotb.test()
async def validate(dut):
    dut._log.info("Start")

    F = 1 # clock frequency multiplier
    
    # Set the clock period to 40 ns (25 MHz ~ VGA pixel clock)
    clock = Clock(dut.clk, 40//F, units="ns")
    cocotb.start_soon(clock.start())

    # Reset
    dut._log.info("Reset")
    dut.ena.value = 1
    dut.ui_in.value = 0 # 2 for built-in ROM
    dut.uio_in.value = 0
    dut.rst_n.value = 1
    await ClockCycles(dut.clk, 2*F)
    dut.rst_n.value = 0
    await ClockCycles(dut.clk, 10*F)
    dut.rst_n.value = 1
    dut.ui_in.value = 0

    dut._log.info("Start")
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00001000)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00001000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00001000)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b10000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
    await ClockCycles(dut.clk, 16)
    assert(dut.uo_out.value == 0b00000000)
